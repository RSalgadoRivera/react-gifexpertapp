{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","placeholder","autoFocus","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"sMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAc9C,OACI,oCACI,0BAAMC,SAVO,SAAAC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,EAAc,CAACE,IACfC,EAAc,OAOV,2BACIM,YAAY,MACZC,WAAW,EACXC,KAAK,OACLC,MAAOV,EACPW,SApBU,SAAAR,GACtBF,EAAcE,EAAES,OAAOF,a,uBCNlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAClDH,GAFe,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,yBAAKc,UAAU,+CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCFHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAAA,GAAa,IAAD,EACVf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAHuB,mBAC7BC,EAD6B,KACtBC,EADsB,KAepC,OATAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GACnBH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGlB,CAACpB,IAEGqB,EDb0BK,CAAa1B,GAAjCa,EADwB,EAC7BN,KAAaa,EADgB,EAChBA,QACrB,OACI,oCACI,4BAAKpB,GACJoB,GAAW,uBAAGJ,UAAU,yCAAb,WACZ,yBAAKA,UAAU,aACVH,EAAOJ,KAAI,SAAAC,GAAG,OACX,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAAQD,UERrCkB,EAAe,WAAO,IAAD,EACM3C,mBAAS,IADf,mBACvB4C,EADuB,KACX7C,EADW,KAG9B,OACI,oCACI,4CACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,4BACK6C,EAAWpB,KAAI,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CAAS2B,IAAK3B,EAAUA,SAAUA,UCTtD8B,IAASC,OAAO,kBAAC,EAAD,MACdC,SAASC,eAAe,U","file":"static/js/main.3e821502.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = e => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 0) {\r\n            setCategories([inputValue]);\r\n            setInputValue('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    placeholder='Gif'\r\n                    autoFocus={true}\r\n                    type='text'\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = { setCategories: PropTypes.func.isRequired };\r\n","export const getGifs = async category => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n        category,\r\n    )}&limit=10&api_key=V7rUO1ibEfJrLl8Rovizoe2CJU7aZTVs`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        };\r\n    });\r\n    return gifs;\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeInUpBig'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const { data:images, loading } = useFetchGifs(category);\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {loading && <p className='card animate__animated animate__flash'>Loading</p>}\r\n            <div className='card-grid'>\r\n                {images.map(img => (\r\n                    <GifGridItem key={img.id} {...img} />\r\n                ))}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = category => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false,\r\n            });\r\n        });\r\n    }, [category]);\r\n\r\n    return state; // {data:[], loading:true}\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <>\r\n            <h2>Busca un Gif</h2>\r\n            <hr />\r\n            <AddCategory setCategories={setCategories} />\r\n            <ol>\r\n                {categories.map(category => (\r\n                    <GifGrid key={category} category={category} />\r\n                ))}\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\n\nReactDOM.render(<GifExpertApp />, \n  document.getElementById('root'));\n"],"sourceRoot":""}